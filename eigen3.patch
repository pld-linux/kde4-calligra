From 2db4438671e17002c7b02e3ad3a5208930765e4f Mon Sep 17 00:00:00 2001
From: Boudewijn Rempt <boud@valdyas.org>
Date: Fri, 9 Sep 2016 12:34:13 +0200
Subject: Remove all occurrences of using Eigen

This way we should be able to use openexr and eigen3's latest
beta together.
---
 image/kis_convolution_kernel.cc               | 14 ++++++------
 image/kis_convolution_kernel.h                |  8 +++----
 image/kis_gaussian_kernel.cpp                 | 12 +++++-----
 image/kis_gaussian_kernel.h                   |  5 ++---
 image/kis_selection_filters.cpp               |  4 ++--
 image/tests/kis_convolution_painter_test.cpp  | 14 ++++++------
 .../kis_color_selector_ring.cpp                    | 25 ++++++++++-----------
 .../waveletdecompose/kis_wavelet_kernel.cpp        | 14 ++++++------
 .../waveletdecompose/kis_wavelet_kernel.h          |  5 ++---
 plugins/filters/blur/kis_gaussian_blur_filter.h    |  2 --
 plugins/filters/blur/kis_lens_blur_filter.cpp      |  2 +-
 plugins/filters/blur/kis_lens_blur_filter.h        |  4 +---
 plugins/filters/blur/kis_motion_blur_filter.cpp    |  2 +-
 plugins/filters/blur/kis_motion_blur_filter.h      |  4 +---
 .../convolutionfilters/convolutionfilters.cpp      | 26 ++++++++++------------
 15 files changed, 64 insertions(+), 77 deletions(-)

diff --git a/krita/image/kis_convolution_kernel.cc b/krita/image/kis_convolution_kernel.cc
index d6473ba..d2d5d0c 100644
--- a/krita/image/kis_convolution_kernel.cc
+++ b/krita/image/kis_convolution_kernel.cc
@@ -27,7 +27,7 @@
 struct Q_DECL_HIDDEN KisConvolutionKernel::Private {
     qreal offset;
     qreal factor;
-    Matrix<qreal, Dynamic, Dynamic> data;
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> data;
 };
 
 KisConvolutionKernel::KisConvolutionKernel(quint32 _width, quint32 _height, qreal _offset, qreal _factor) : d(new Private)
@@ -73,12 +73,12 @@ void KisConvolutionKernel::setFactor(qreal factor)
     d->factor = factor;
 }
 
-Matrix<qreal, Dynamic, Dynamic>& KisConvolutionKernel::data()
+Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>& KisConvolutionKernel::data()
 {
     return d->data;
 }
 
-const Matrix<qreal, Dynamic, Dynamic>* KisConvolutionKernel::data() const
+const Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>* KisConvolutionKernel::data() const
 {
     return &(d->data);
 }
@@ -87,7 +87,7 @@ KisConvolutionKernelSP KisConvolutionKernel::fromQImage(const QImage& image)
 {
     KisConvolutionKernelSP kernel = new KisConvolutionKernel(image.width(), image.height(), 0, 0);
 
-    Matrix<qreal, Dynamic, Dynamic>& data = kernel->data();
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>& data = kernel->data();
 #if QT_VERSION >= 0x040700
     const quint8* itImage = image.constBits();
 #else
@@ -118,7 +118,7 @@ KisConvolutionKernelSP KisConvolutionKernel::fromMaskGenerator(KisMaskGenerator*
     qreal xc = 0.5 * width - 0.5;
     qreal yc = 0.5 * height - 0.5;
 
-    Matrix<qreal, Dynamic, Dynamic>& data = kernel->data();
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>& data = kernel->data();
     qreal factor = 0;
 
 //     dbgImage << ppVar(xc) << ppVar(yc);
@@ -138,9 +138,9 @@ KisConvolutionKernelSP KisConvolutionKernel::fromMaskGenerator(KisMaskGenerator*
     return kernel;
 }
 
-KisConvolutionKernelSP KisConvolutionKernel::fromMatrix(Matrix<qreal, Dynamic, Dynamic> matrix, qreal offset, qreal factor)
+KisConvolutionKernelSP KisConvolutionKernel::fromMatrix(Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> matrix, qreal offset, qreal factor)
 {
-    KisConvolutionKernelSP kernel = new KisConvolutionKernel(matrix.cols(), matrix.rows(), offset, factor);        
+    KisConvolutionKernelSP kernel = new KisConvolutionKernel(matrix.cols(), matrix.rows(), offset, factor);
     kernel->data() = matrix;
 
     return kernel;
diff --git a/krita/image/kis_convolution_kernel.h b/krita/image/kis_convolution_kernel.h
index 7df71dd..8c58839 100644
--- a/krita/image/kis_convolution_kernel.h
+++ b/krita/image/kis_convolution_kernel.h
@@ -25,8 +25,6 @@
 #include "kritaimage_export.h"
 #include "kis_types.h"
 
-using namespace Eigen;
-
 class KisMaskGenerator;
 class QImage;
 
@@ -46,12 +44,12 @@ public:
     qreal offset() const;
     qreal factor() const;
     void setFactor(qreal);
-    Matrix<qreal, Dynamic, Dynamic>& data();
-    const Matrix<qreal, Dynamic, Dynamic> * data() const;
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>& data();
+    const Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> * data() const;
 
     static KisConvolutionKernelSP fromQImage(const QImage& image);
     static KisConvolutionKernelSP fromMaskGenerator(KisMaskGenerator *, qreal angle = 0.0);
-    static KisConvolutionKernelSP fromMatrix(Matrix<qreal, Dynamic, Dynamic> matrix, qreal offset, qreal factor);
+    static KisConvolutionKernelSP fromMatrix(Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> matrix, qreal offset, qreal factor);
 private:
     struct Private;
     Private* const d;
diff --git a/krita/image/kis_gaussian_kernel.cpp b/krita/image/kis_gaussian_kernel.cpp
index 822e80e..9f859d2 100644
--- a/krita/image/kis_gaussian_kernel.cpp
+++ b/krita/image/kis_gaussian_kernel.cpp
@@ -34,11 +34,11 @@ int KisGaussianKernel::kernelSizeFromRadius(qreal radius)
 }
 
 
-Matrix<qreal, Dynamic, Dynamic>
+Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>
 KisGaussianKernel::createHorizontalMatrix(qreal radius)
 {
     int kernelSize = kernelSizeFromRadius(radius);
-    Matrix<qreal, Dynamic, Dynamic> matrix(1, kernelSize);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> matrix(1, kernelSize);
 
     const qreal sigma = sigmaFromRadius(radius);
     const qreal multiplicand = 1 / (sqrt(2 * M_PI * sigma * sigma));
@@ -59,11 +59,11 @@ KisGaussianKernel::createHorizontalMatrix(qreal radius)
     return matrix;
 }
 
-Matrix<qreal, Dynamic, Dynamic>
+Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>
 KisGaussianKernel::createVerticalMatrix(qreal radius)
 {
     int kernelSize = kernelSizeFromRadius(radius);
-    Matrix<qreal, Dynamic, Dynamic> matrix(kernelSize, 1);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> matrix(kernelSize, 1);
 
     const qreal sigma = sigmaFromRadius(radius);
     const qreal multiplicand = 1 / (sqrt(2 * M_PI * sigma * sigma));
@@ -87,14 +87,14 @@ KisGaussianKernel::createVerticalMatrix(qreal radius)
 KisConvolutionKernelSP
 KisGaussianKernel::createHorizontalKernel(qreal radius)
 {
-    Matrix<qreal, Dynamic, Dynamic> matrix = createHorizontalMatrix(radius);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> matrix = createHorizontalMatrix(radius);
     return KisConvolutionKernel::fromMatrix(matrix, 0, matrix.sum());
 }
 
 KisConvolutionKernelSP
 KisGaussianKernel::createVerticalKernel(qreal radius)
 {
-    Matrix<qreal, Dynamic, Dynamic> matrix = createVerticalMatrix(radius);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> matrix = createVerticalMatrix(radius);
     return KisConvolutionKernel::fromMatrix(matrix, 0, matrix.sum());
 }
 
diff --git a/krita/image/kis_gaussian_kernel.h b/krita/image/kis_gaussian_kernel.h
index ae59286..ed992ec 100644
--- a/krita/image/kis_gaussian_kernel.h
+++ b/krita/image/kis_gaussian_kernel.h
@@ -23,17 +23,16 @@
 #include "kis_types.h"
 
 #include <Eigen/Core>
-using namespace Eigen;
 
 class QRect;
 
 class KRITAIMAGE_EXPORT KisGaussianKernel
 {
 public:
-    static Matrix<qreal, Dynamic, Dynamic>
+    static Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>
         createHorizontalMatrix(qreal radius);
 
-    static Matrix<qreal, Dynamic, Dynamic>
+    static Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic>
         createVerticalMatrix(qreal radius);
 
     static KisConvolutionKernelSP
diff --git a/krita/image/kis_selection_filters.cpp b/krita/image/kis_selection_filters.cpp
index b790436..2bcdf54 100644
--- a/krita/image/kis_selection_filters.cpp
+++ b/krita/image/kis_selection_filters.cpp
@@ -187,7 +187,7 @@ KUndo2MagicString KisDilateSelectionFilter::name()
 QRect KisDilateSelectionFilter::changeRect(const QRect& rect)
 {
     const qint32 radius = 1;
-    return rect.adjusted(-radius, -radius, radius, radius); 
+    return rect.adjusted(-radius, -radius, radius, radius);
 }
 
 void KisDilateSelectionFilter::process(KisPixelSelectionSP pixelSelection, const QRect& rect)
@@ -483,7 +483,7 @@ void KisFeatherSelectionFilter::process(KisPixelSelectionSP pixelSelection, cons
 {
     // compute horizontal kernel
     const uint kernelSize = m_radius * 2 + 1;
-    Matrix<qreal, Dynamic, Dynamic> gaussianMatrix(1, kernelSize);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> gaussianMatrix(1, kernelSize);
 
     const qreal multiplicand = 1 / (2 * M_PI * m_radius * m_radius);
     const qreal exponentMultiplicand = 1 / (2 * m_radius * m_radius);
diff --git a/krita/image/tests/kis_convolution_painter_test.cpp b/krita/image/tests/kis_convolution_painter_test.cpp
index d8898fd..efcd181 100644
--- a/krita/image/tests/kis_convolution_painter_test.cpp
+++ b/krita/image/tests/kis_convolution_painter_test.cpp
@@ -56,9 +56,9 @@ KisPaintDeviceSP initAsymTestDevice(QRect &imageRect, int &pixelSize, QByteArray
     return dev;
 }
 
-Matrix<qreal, 3, 3> initSymmFilter(qreal &offset, qreal &factor)
+Eigen::Matrix<qreal, 3, 3> initSymmFilter(qreal &offset, qreal &factor)
 {
-    Matrix<qreal, 3, 3> filter;
+    Eigen::Matrix<qreal, 3, 3> filter;
     filter(0,0) = 1.0 / 21;
     filter(0,1) = 3.0 / 21;
     filter(0,2) = 1.0 / 21;
@@ -77,9 +77,9 @@ Matrix<qreal, 3, 3> initSymmFilter(qreal &offset, qreal &factor)
     return filter;
 }
 
-Matrix<qreal, 3, 3> initAsymmFilter(qreal &offset, qreal &factor)
+Eigen::Matrix<qreal, 3, 3> initAsymmFilter(qreal &offset, qreal &factor)
 {
-    Matrix<qreal, 3, 3> filter;
+    Eigen::Matrix<qreal, 3, 3> filter;
     filter(0,0) = 1.0;
     filter(1,0) = 2.0;
     filter(2,0) = 1.0;
@@ -144,7 +144,7 @@ void KisConvolutionPainterTest::testSymmConvolution()
 {
     qreal offset = 0.0;
     qreal factor = 1.0;
-    Matrix<qreal, 3, 3> filter = initSymmFilter(offset, factor);
+    Eigen::Matrix<qreal, 3, 3> filter = initSymmFilter(offset, factor);
 
     QRect imageRect;
     int pixelSize = 0;
@@ -172,7 +172,7 @@ void KisConvolutionPainterTest::testAsymmConvolutionImp(QBitArray channelFlags)
 {
     qreal offset = 0.0;
     qreal factor = 1.0;
-    Matrix<qreal, 3, 3> filter = initAsymmFilter(offset, factor);
+    Eigen::Matrix<qreal, 3, 3> filter = initAsymmFilter(offset, factor);
 
     QRect imageRect;
     int pixelSize = -1;
@@ -317,7 +317,7 @@ void KisConvolutionPainterTest::testGaussianBase(KisPaintDeviceSP dev, bool useF
 
 
    qreal horizontalRadius = 5, verticalRadius = 5;
-   
+
    for(int i = 0; i < 3 ; i++, horizontalRadius+=5, verticalRadius+=5)
    {
        QTime timer;
diff --git a/krita/plugins/extensions/dockers/advancedcolorselector/kis_color_selector_ring.cpp b/krita/plugins/extensions/dockers/advancedcolorselector/kis_color_selector_ring.cpp
index 94e09bb..4ea4143 100644
--- a/krita/plugins/extensions/dockers/advancedcolorselector/kis_color_selector_ring.cpp
+++ b/krita/plugins/extensions/dockers/advancedcolorselector/kis_color_selector_ring.cpp
@@ -21,7 +21,6 @@
 #include <QMouseEvent>
 
 #include <Eigen/Core>
-using namespace Eigen;
 #include <cmath>
 
 #include "KoColor.h"
@@ -53,10 +52,10 @@ bool KisColorSelectorRing::containsPointInComponentCoords(int x, int y) const
     int innerRadiusSquared = innerRadius();
     outerRadiusSquared*=outerRadiusSquared;
     innerRadiusSquared*=innerRadiusSquared;
-    
-    
-    Vector2i relativeVector(x-width()/2, y-height()/2);
-    
+
+
+    Eigen::Vector2i relativeVector(x-width()/2, y-height()/2);
+
     if(relativeVector.squaredNorm() < outerRadiusSquared
        && relativeVector.squaredNorm() > innerRadiusSquared) {
         return true;
@@ -72,13 +71,13 @@ void KisColorSelectorRing::paint(QPainter* painter)
         colorCache();
         paintCache();
     }
-    
+
     int size = qMin(width(), height());
     if(m_cachedSize!=size) {
         m_cachedSize=size;
         paintCache();
     }
-    
+
     painter->drawImage(width()/2-m_pixelCache.width()/2,
                 height()/2-m_pixelCache.height()/2,
                 m_pixelCache);
@@ -139,17 +138,17 @@ void KisColorSelectorRing::setColor(const KoColor &color)
 void KisColorSelectorRing::paintCache()
 {
     QImage cache(m_cachedSize, m_cachedSize, QImage::Format_ARGB32_Premultiplied);
-    
-    Vector2i center(cache.width()/2., cache.height()/2.);
-    
+
+    Eigen::Vector2i center(cache.width()/2., cache.height()/2.);
+
     for(int x=0; x<cache.width(); x++) {
         for(int y=0; y<cache.height(); y++) {
-            Vector2i currentPoint((float)x, (float)y);
-            Vector2i relativeVector = currentPoint-center;
+            Eigen::Vector2i currentPoint((float)x, (float)y);
+            Eigen::Vector2i relativeVector = currentPoint-center;
 
             qreal currentRadius = relativeVector.squaredNorm();
             currentRadius=sqrt(currentRadius);
-            
+
             if(currentRadius < outerRadius()+1
                && currentRadius > innerRadius()-1)
             {
diff --git a/krita/plugins/filters/blur/kis_gaussian_blur_filter.h b/krita/plugins/filters/blur/kis_gaussian_blur_filter.h
index ee7bef3..7fd7b11 100644
--- a/krita/plugins/filters/blur/kis_gaussian_blur_filter.h
+++ b/krita/plugins/filters/blur/kis_gaussian_blur_filter.h
@@ -26,8 +26,6 @@
 
 #include <Eigen/Core>
 
-using namespace Eigen;
-
 class KisGaussianBlurFilter : public KisFilter
 {
 public:
diff --git a/krita/plugins/filters/blur/kis_lens_blur_filter.cpp b/krita/plugins/filters/blur/kis_lens_blur_filter.cpp
index 81d21d3..92a2ffb 100644
--- a/krita/plugins/filters/blur/kis_lens_blur_filter.cpp
+++ b/krita/plugins/filters/blur/kis_lens_blur_filter.cpp
@@ -165,7 +165,7 @@ void KisLensBlurFilter::processImpl(KisPaintDeviceSP device,
     imagePainter.drawPolygon(transformedIris, Qt::WindingFill);
 
     // construct kernel from image
-    Matrix<qreal, Dynamic, Dynamic> irisKernel(kernelHeight, kernelWidth);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> irisKernel(kernelHeight, kernelWidth);
     for (int j = 0; j < kernelHeight; ++j) {
         for (int i = 0; i < kernelWidth; ++i) {
             irisKernel(j, i) = qRed(kernelRepresentation.pixel(i, j));
diff --git a/krita/plugins/filters/blur/kis_lens_blur_filter.h b/krita/plugins/filters/blur/kis_lens_blur_filter.h
index 73e7704..8f19045 100644
--- a/krita/plugins/filters/blur/kis_lens_blur_filter.h
+++ b/krita/plugins/filters/blur/kis_lens_blur_filter.h
@@ -1,4 +1,4 @@
-/* 
+/*
  * This file is part of Krita
  *
  * Copyright (c) 2010 Edward Apap <schumifer@hotmail.com>
@@ -27,8 +27,6 @@
 
 #include <Eigen/Core>
 
-using namespace Eigen;
-
 class KisLensBlurFilter : public KisFilter
 {
 public:
diff --git a/krita/plugins/filters/blur/kis_motion_blur_filter.cpp b/krita/plugins/filters/blur/kis_motion_blur_filter.cpp
index 1e00a14..2924f76 100644
--- a/krita/plugins/filters/blur/kis_motion_blur_filter.cpp
+++ b/krita/plugins/filters/blur/kis_motion_blur_filter.cpp
@@ -119,7 +119,7 @@ void KisMotionBlurFilter::processImpl(KisPaintDeviceSP device,
                           QPointF(kernelWidth / 2 + halfWidth, kernelHeight / 2 - halfHeight));
 
     // construct kernel from image
-    Matrix<qreal, Dynamic, Dynamic> motionBlurKernel(kernelHeight, kernelWidth);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> motionBlurKernel(kernelHeight, kernelWidth);
     for (int j = 0; j < kernelHeight; ++j) {
         for (int i = 0; i < kernelWidth; ++i) {
             motionBlurKernel(j, i) = qRed(kernelRepresentation.pixel(i, j));
diff --git a/krita/plugins/filters/blur/kis_motion_blur_filter.h b/krita/plugins/filters/blur/kis_motion_blur_filter.h
index 3808a99..9eb31f0 100644
--- a/krita/plugins/filters/blur/kis_motion_blur_filter.h
+++ b/krita/plugins/filters/blur/kis_motion_blur_filter.h
@@ -27,8 +27,6 @@
 
 #include <Eigen/Core>
 
-using namespace Eigen;
-
 class KisMotionBlurFilter : public KisFilter
 {
 public:
diff --git a/krita/plugins/filters/convolutionfilters/convolutionfilters.cpp b/krita/plugins/filters/convolutionfilters/convolutionfilters.cpp
index 2198e73..d2f4d94 100644
--- a/krita/plugins/filters/convolutionfilters/convolutionfilters.cpp
+++ b/krita/plugins/filters/convolutionfilters/convolutionfilters.cpp
@@ -36,8 +36,6 @@
 
 #include <Eigen/Core>
 
-using namespace Eigen;
-
 K_PLUGIN_FACTORY(KritaConvolutionFiltersFactory, registerPlugin<KritaConvolutionFilters>();)
 K_EXPORT_PLUGIN(KritaConvolutionFiltersFactory("krita"))
 
@@ -68,7 +66,7 @@ KisSharpenFilter::KisSharpenFilter()
     setSupportsPainting(true);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix <<  0, -2,   0,
                     -2,  11, -2,
                      0, -2,   0;
@@ -82,7 +80,7 @@ KisMeanRemovalFilter::KisMeanRemovalFilter()
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix << -1, -1, -1,
                     -1,  9, -1,
                     -1, -1, -1;
@@ -96,7 +94,7 @@ KisEmbossLaplascianFilter::KisEmbossLaplascianFilter()
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix << -1, 0, -1,
                      0, 4,  0,
                     -1, 0, -1;
@@ -111,7 +109,7 @@ KisEmbossInAllDirectionsFilter::KisEmbossInAllDirectionsFilter()
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix << -1, -1, -1,
                     -1,  8, -1,
                     -1, -1, -1;
@@ -126,7 +124,7 @@ KisEmbossHorizontalVerticalFilter::KisEmbossHorizontalVerticalFilter()
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix <<  0, -1,  0,
                     -1,  4, -1,
                      0, -1,  0;
@@ -141,7 +139,7 @@ KisEmbossVerticalFilter::KisEmbossVerticalFilter()
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix << 0, -1, 0,
                     0,  2, 0,
                     0, -1, 0;
@@ -156,7 +154,7 @@ KisEmbossHorizontalFilter::KisEmbossHorizontalFilter() :
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix <<  0, 0,  0,
                     -1, 2, -1,
                      0, 0,  0;
@@ -171,7 +169,7 @@ KisEmbossDiagonalFilter::KisEmbossDiagonalFilter()
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix << -1, 0, -1,
                      0, 4,  0,
                     -1, 0, -1;
@@ -187,7 +185,7 @@ KisTopEdgeDetectionFilter::KisTopEdgeDetectionFilter()
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix <<  1,  1,  1,
                      0,  0,  0,
                     -1, -1, -1;
@@ -202,7 +200,7 @@ KisRightEdgeDetectionFilter::KisRightEdgeDetectionFilter()
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix << -1, 0, 1,
                     -1, 0, 1,
                     -1, 0, 1;
@@ -216,7 +214,7 @@ KisBottomEdgeDetectionFilter::KisBottomEdgeDetectionFilter() : KisConvolutionFil
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix << -1, -1, -1,
                      0,  0,  0,
                      1,  1,  1;
@@ -230,7 +228,7 @@ KisLeftEdgeDetectionFilter::KisLeftEdgeDetectionFilter() : KisConvolutionFilter(
     setSupportsPainting(false);
     setShowConfigurationWidget(false);
 
-    Matrix<qreal, Dynamic, Dynamic> kernelMatrix(3, 3);
+    Eigen::Matrix<qreal, Eigen::Dynamic, Eigen::Dynamic> kernelMatrix(3, 3);
     kernelMatrix << 1, 0, -1,
                     1, 0, -1,
                     1, 0, -1;
-- 
cgit v1.1

